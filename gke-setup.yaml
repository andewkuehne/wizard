steps:
# Step 1: Create or update GKE cluster
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'create-gke-cluster'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    if gcloud container clusters describe ${_CLUSTER_NAME} --zone=${_ZONE} --project=${_PROJECT_ID} 2>/dev/null; then
      echo "Cluster already exists, updating..."
      gcloud container clusters update ${_CLUSTER_NAME} \
        --zone=${_ZONE} \
        --project=${_PROJECT_ID} \
        --num-nodes=${_NODE_COUNT} \
        --enable-autoscaling --min-nodes=1 --max-nodes=5
    else
      echo "Creating new cluster..."
      gcloud container clusters create ${_CLUSTER_NAME} \
        --num-nodes=${_NODE_COUNT} \
        --zone=${_ZONE} \
        --project=${_PROJECT_ID} \
        --enable-autoscaling --min-nodes=1 --max-nodes=5
    fi

# Step 2: Get credentials for the cluster
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'get-credentials'
  args:
  - 'container'
  - 'clusters'
  - 'get-credentials'
  - '${_CLUSTER_NAME}'
  - '--zone=${_ZONE}'
  - '--project=${_PROJECT_ID}'

# Step 3: Grant cluster-admin role (WARNING: This is highly permissive)
- name: 'gcr.io/cloud-builders/kubectl'
  id: 'grant-admin-role'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    kubectl create clusterrolebinding user-admin-binding \
      --clusterrole=cluster-admin \
      --user=$(gcloud config get-value account) \
      || echo "Cluster role binding already exists"

substitutions:
  _PROJECT_ID: ${PROJECT_ID}
  _ZONE: us-central1-a
  _CLUSTER_NAME: tasky-cluster
  _NODE_COUNT: "3"