steps:
# Step 1: MongoDB Setup
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'create-mongodb-vm'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud compute instances create mongodb-vm \
    --image-family ubuntu-2004-lts \
    --image-project ubuntu-os-cloud \
    --machine-type ${_MACHINE_TYPE} \
    --zone ${_ZONE}

# Step 2: Install MongoDB
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'install-mongodb'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud compute ssh mongodb-vm --zone ${_ZONE} --command "
    sudo apt-get update && \
    wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add - && \
    echo 'deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse' | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list && \
    sudo apt-get update && \
    sudo apt-get install -y mongodb-org && \
    sudo systemctl start mongod && \
    sudo systemctl enable mongod
    "

# Step 3: Setup MongoDB Auth
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'setup-mongodb-auth'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    MONGODB_PASSWORD=$(gcloud secrets versions access latest --secret=mongodb-password)
    gcloud compute ssh mongodb-vm --zone ${_ZONE} --command "
    mongo admin --eval 'db.createUser({user: \"admin\", pwd: \"$${MONGODB_PASSWORD}\", roles: [{role: \"root\", db: \"admin\"}]})' && \
    sudo sed -i 's/#security:/security:\\n  authorization: enabled/' /etc/mongod.conf && \
    sudo systemctl restart mongod
    "

# Step 4: Create Backup Bucket
- name: 'gcr.io/cloud-builders/gsutil'
  id: 'create-backup-bucket'
  args: ['mb', '-p', '${PROJECT_ID}', 'gs://${_BACKUP_BUCKET}']

# Step 5: GKE Setup
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'create-gke-cluster'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    set -e
    gcloud container clusters create ${_CLUSTER_NAME} \
      --num-nodes=${_NODE_COUNT} \
      --zone=${_ZONE} \
      --project=${PROJECT_ID}
    
    # Set kubectl context
    gcloud container clusters get-credentials ${_CLUSTER_NAME} \
      --zone=${_ZONE} \
      --project=${PROJECT_ID}

# Step 6: Traefik Setup
- name: 'gcr.io/cloud-builders/kubectl'
  id: 'traefik-setup'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    kubectl config view
    kubectl apply -f traefik-config.yaml

# Step 7: Build and push Docker image
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-image'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/tasky-app:v1', '.']
- name: 'gcr.io/cloud-builders/docker'
  id: 'push-image'
  args: ['push', 'gcr.io/${PROJECT_ID}/tasky-app:v1']

# Step 8: Create Kubernetes secret
- name: 'gcr.io/cloud-builders/kubectl'
  id: 'create-secret'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    MONGODB_PASSWORD=$(gcloud secrets versions access latest --secret=mongodb-password)
    kubectl create secret generic mongodb-secret \
      --from-literal=uri="mongodb://admin:$${MONGODB_PASSWORD}@$(gcloud compute instances describe mongodb-vm --zone=${_ZONE} --format='get(networkInterfaces[0].networkIP)'):27017/admin" \
      --dry-run=client -o yaml | kubectl apply -f -

# Step 9: Apply Kubernetes Deployment
- name: 'gcr.io/cloud-builders/kubectl'
  id: 'apply-k8s-deployment'
  args:
  - 'apply'
  - '-f'
  - 'k8s-deployment.yaml'

substitutions:
  _ZONE: us-central1-a
  _CLUSTER_NAME: tasky-cluster
  _NODE_COUNT: "3"
  _MACHINE_TYPE: e2-medium
  _BACKUP_BUCKET: ${PROJECT_ID}-mongodb-backups

options:
  logging: CLOUD_LOGGING_ONLY

timeout: 3600s
